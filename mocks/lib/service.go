// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	os "os"
	lib "trash/internal/lib"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// MakeFromFile provides a mock function with given fields: _a0
func (_m *Service) MakeFromFile(_a0 *os.File) lib.File {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MakeFromFile")
	}

	var r0 lib.File
	if rf, ok := ret.Get(0).(func(*os.File) lib.File); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.File)
		}
	}

	return r0
}

// Service_MakeFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeFromFile'
type Service_MakeFromFile_Call struct {
	*mock.Call
}

// MakeFromFile is a helper method to define mock.On call
//   - _a0 *os.File
func (_e *Service_Expecter) MakeFromFile(_a0 interface{}) *Service_MakeFromFile_Call {
	return &Service_MakeFromFile_Call{Call: _e.mock.On("MakeFromFile", _a0)}
}

func (_c *Service_MakeFromFile_Call) Run(run func(_a0 *os.File)) *Service_MakeFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*os.File))
	})
	return _c
}

func (_c *Service_MakeFromFile_Call) Return(_a0 lib.File) *Service_MakeFromFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_MakeFromFile_Call) RunAndReturn(run func(*os.File) lib.File) *Service_MakeFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
