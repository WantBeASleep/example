// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	os "os"
	lib "trash/internal/lib"

	mock "github.com/stretchr/testify/mock"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// FileColor provides a mock function with given fields: _a0
func (_m *File) FileColor(_a0 *os.File) (lib.Color, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FileColor")
	}

	var r0 lib.Color
	var r1 error
	if rf, ok := ret.Get(0).(func(*os.File) (lib.Color, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*os.File) lib.Color); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(lib.Color)
	}

	if rf, ok := ret.Get(1).(func(*os.File) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_FileColor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileColor'
type File_FileColor_Call struct {
	*mock.Call
}

// FileColor is a helper method to define mock.On call
//   - _a0 *os.File
func (_e *File_Expecter) FileColor(_a0 interface{}) *File_FileColor_Call {
	return &File_FileColor_Call{Call: _e.mock.On("FileColor", _a0)}
}

func (_c *File_FileColor_Call) Run(run func(_a0 *os.File)) *File_FileColor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*os.File))
	})
	return _c
}

func (_c *File_FileColor_Call) Return(_a0 lib.Color, _a1 error) *File_FileColor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_FileColor_Call) RunAndReturn(run func(*os.File) (lib.Color, error)) *File_FileColor_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
